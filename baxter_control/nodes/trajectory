#!/usr/bin/env python
"""

**Info**: This *trajectory* node 

**Services**:



**Parameters**:

    
**Note**: -

"""
import rospy
import sys
import moveit_commander
from geometry_msgs.msg import Quaternion, Vector3, PoseStamped, Pose
from moveit_msgs.msg import MoveItErrorCodes
from baxter_control.srv import home, go2pose
import baxter_interface
from baxter_interface import Gripper
#Import params from waypoints.yaml

#freq = rospy.get_param("/Fr") #Define frequency rate
freq = 200





def main():
        
    #initialize moveit_commander
    joint_state_topic = ['joint_states:=/robot/joint_states']
    moveit_commander.roscpp_initialize(joint_state_topic)
    #moveit_commander.roscpp_initialize(sys.argv)

    #initialize node
    rospy.init_node('trajectory')

    #instantiate a RobotCommander object
    robot = moveit_commander.RobotCommander()

    #instantiate a PlanningSceneInterface object
    scene = moveit_commander.PlanningSceneInterface()

    #logerr msg to check if node is running
    rospy.logerr("This is just a check for mover node, ignore me")

    #set group names 
    left_arm = "left_arm"
    left_hand = "left_hand"
    right_arm = "right_arm"
    right_hand = "right_hand"
    both_arms = "both_arms"

    #init MoveIt for groups
    left_arm_moveit = moveit_commander.MoveGroupCommander(left_arm)
    left_hand_moveit = moveit_commander.MoveGroupCommander(left_hand)
    right_arm_moveit = moveit_commander.MoveGroupCommander(right_arm)
    right_hand_moveit = moveit_commander.MoveGroupCommander(right_hand)
    both_arms_moveit = moveit_commander.MoveGroupCommander(both_arms)

    #define ros frequency
    hz = rospy.Rate(freq)

    #get current pose of robot
    left_current_pose = left_arm_moveit.get_current_pose(end_effector_link='left_gripper').pose
    right_current_pose = right_arm_moveit.get_current_pose(end_effector_link='right_gripper').pose
    print(left_current_pose)
    print(right_current_pose)
    
    #Set moveit params
    left_arm_moveit.set_goal_position_tolerance(0.001)
    left_arm_moveit.set_goal_orientation_tolerance(0.01)
    left_arm_moveit.set_planning_time(10.0)
    left_arm_moveit.allow_replanning(True)
    left_arm_moveit.set_max_velocity_scaling_factor(0.5)
    left_arm_moveit.set_max_acceleration_scaling_factor(0.5)
    
    #Define home_callback service
    def home_callback(msg):
        #reset both arms
        left_arm_moveit.set_named_target('left_neutral')
        right_arm_moveit.set_named_target('right_neutral')
        left_arm_moveit.go()
        right_arm_moveit.go()
        left_arm_moveit.stop()
        right_arm_moveit.stop()
        left_arm_moveit.clear_pose_targets()
        right_arm_moveit.clear_pose_targets()
        return {'response': "Home Position Set"}

    #Define go2pose_callback service
    def go2pose_callback(msg):
        #get current pose of robot
        left_current_pose = left_arm_moveit.get_current_pose(end_effector_link='left_gripper').pose
        right_current_pose = right_arm_moveit.get_current_pose(end_effector_link='right_gripper').pose

        # Planning to a Pose goal (relative)
        left_target_pose = left_current_pose
        left_target_pose.position.x = left_current_pose.position.x + msg.goal_position.x
        left_target_pose.position.y = left_current_pose.position.y + msg.goal_position.y
        left_target_pose.position.z = left_current_pose.position.z + msg.goal_position.z
        left_target_pose.orientation.x = left_current_pose.orientation.x + msg.goal_orientation.x
        left_target_pose.orientation.y = left_current_pose.orientation.y + msg.goal_orientation.y
        left_target_pose.orientation.z = left_current_pose.orientation.z + msg.goal_orientation.z
        left_target_pose.orientation.w = left_current_pose.orientation.w + msg.goal_orientation.w

        #pose_goal.orientation = msg.goal_orientation
        left_arm_moveit.set_pose_target(left_target_pose)

        #plan and execute
        (success_status, trajectory_message, planning_time, error) = left_arm_moveit.plan()
        left_arm_moveit.execute(trajectory_message, wait=True)
        left_arm_moveit.go()

        #stop and clear the target
        left_arm_moveit.stop()
        left_arm_moveit.clear_pose_targets()

        if success_status == 1:
            return {'response': "Planning success!", 'error':error}
        else:
            return {'response': "Planning failed!", 'error':error}
     
    #init home, reset, step and follow services
    home_srv = rospy.Service("home", home, home_callback)
    go2pose_srv = rospy.Service("go2pose", go2pose, go2pose_callback)

    #iteration loop
    while not rospy.is_shutdown():

        #check
        #rospy.loginfo("check")
        
        #go to sleep!
        hz.sleep()

if __name__ == "__main__":
    try:
        main()
    except rospy.ROSInterruptException:
        pass 