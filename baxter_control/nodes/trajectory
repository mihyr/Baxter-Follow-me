#!/usr/bin/env python
"""

**Info**: This *trajectory* node 

**Services**:



**Parameters**:

    
**Note**: -

"""
import rospy
import sys
import moveit_commander
from geometry_msgs.msg import Quaternion, Vector3, PoseStamped, Pose
from moveit_msgs.msg import MoveItErrorCodes
from baxter_control.srv import home, left_go2pose, right_go2pose, followme, left_grip, right_grip
import baxter_interface
from baxter_interface import Gripper, CHECK_VERSION
from std_srvs.srv import Empty, EmptyResponse


#Import params from waypoints.yaml
#freq = rospy.get_param("/Fr") #Define frequency rate
freq = 200

def main():
        
    #initialize moveit_commander
    joint_state_topic = ['joint_states:=/robot/joint_states']
    moveit_commander.roscpp_initialize(joint_state_topic)
    #moveit_commander.roscpp_initialize(sys.argv)

    #initialize node
    rospy.init_node('trajectory')

    #instantiate a RobotCommander object
    robot = moveit_commander.RobotCommander()

    #instantiate a PlanningSceneInterface object
    scene = moveit_commander.PlanningSceneInterface()

    #logerr msg to check if node is running
    rospy.logerr("This is just a check for mover node, ignore me")
    
    #set group names 
    left_arm = "left_arm"
    left_hand = "left_hand"
    right_arm = "right_arm"
    right_hand = "right_hand"
    both_arms = "both_arms"

    #init MoveIt for groups
    left_arm_moveit = moveit_commander.MoveGroupCommander(left_arm)
    left_hand_moveit = moveit_commander.MoveGroupCommander(left_hand)
    right_arm_moveit = moveit_commander.MoveGroupCommander(right_arm)
    right_hand_moveit = moveit_commander.MoveGroupCommander(right_hand)
    both_arms_moveit = moveit_commander.MoveGroupCommander(both_arms)
    print(left_hand_moveit.get_current_pose(end_effector_link='left_gripper'))
    #define ros frequency
    hz = rospy.Rate(freq)

    #get current pose of robot
    left_current_pose = left_arm_moveit.get_current_pose(end_effector_link='left_gripper').pose
    right_current_pose = right_arm_moveit.get_current_pose(end_effector_link='right_gripper').pose
    print(left_current_pose)
    print(right_current_pose)
    
    #Set moveit params
    left_arm_moveit.set_goal_position_tolerance(0.005)
    left_arm_moveit.set_goal_orientation_tolerance(0.01)
    left_arm_moveit.set_planning_time(5.0)

    #left_arm_moveit.set_num_planning_attempts(10)
    left_arm_moveit.allow_replanning(True)
    left_arm_moveit.set_max_velocity_scaling_factor(0.3)
    left_arm_moveit.set_max_acceleration_scaling_factor(0.2)

    right_arm_moveit.set_goal_position_tolerance(0.005)
    right_arm_moveit.set_goal_orientation_tolerance(0.01)
    right_arm_moveit.set_planning_time(5.0)
    #right_arm_moveit.set_num_planning_attempts(10)
    right_arm_moveit.allow_replanning(True)
    right_arm_moveit.set_max_velocity_scaling_factor(0.3)
    right_arm_moveit.set_max_acceleration_scaling_factor(0.2)

    left_gripper = Gripper('left', CHECK_VERSION)
    right_gripper = Gripper('right', CHECK_VERSION)

    #Define home_callback service
    def home_callback(msg):
        #reset both arms
        left_arm_moveit.set_named_target('left_neutral')
        right_arm_moveit.set_named_target('right_neutral')
        left_arm_moveit.go()
        right_arm_moveit.go()
        left_arm_moveit.stop()
        right_arm_moveit.stop()
        left_arm_moveit.clear_pose_targets()
        right_arm_moveit.clear_pose_targets()
        return {'response': "Home Position Set"}


    #Define left_go2pose_callback service
    def left_go2pose_callback(msg):
        #get current pose of robot
        left_current_pose = left_arm_moveit.get_current_pose(end_effector_link='left_gripper').pose
            
        # Planning to a Pose goal (relative)
        left_target_pose = left_current_pose
        #use += to update relatively | use = to update absolute
        left_target_pose.position.x = msg.goal_position.x
        left_target_pose.position.y = msg.goal_position.y
        left_target_pose.position.z = msg.goal_position.z
        left_target_pose.orientation.x += msg.goal_orientation.x
        left_target_pose.orientation.y += msg.goal_orientation.y
        left_target_pose.orientation.z += msg.goal_orientation.z
        left_target_pose.orientation.w += msg.goal_orientation.w
        
        left_arm_moveit.set_pose_target(left_target_pose)
        #plan and execute
        #(success_status, trajectory_message, planning_time, error) = left_arm_moveit.plan()
        #left_arm_moveit.execute(trajectory_message, wait=True)
        left_arm_moveit.go()
        left_arm_moveit.stop()
        left_arm_moveit.clear_pose_targets()
        left_new_pose = left_arm_moveit.get_current_pose(end_effector_link='left_gripper').pose

        return {'response': "Done", 'new_pose': left_new_pose}

    #Define right_go2pose_callback service
    def right_go2pose_callback(msg):
        #get current pose of robot
        right_current_pose = right_arm_moveit.get_current_pose(end_effector_link='right_gripper').pose
            
        # Planning to a Pose goal (relative)
        right_target_pose = right_current_pose
        #use += to update relatively | use = to update absolute
        right_target_pose.position.x = msg.goal_position.x
        right_target_pose.position.y = msg.goal_position.y
        right_target_pose.position.z = msg.goal_position.z
        right_target_pose.orientation.x += msg.goal_orientation.x
        right_target_pose.orientation.y += msg.goal_orientation.y
        right_target_pose.orientation.z += msg.goal_orientation.z
        right_target_pose.orientation.w += msg.goal_orientation.w 
        
        right_arm_moveit.set_pose_target(right_target_pose)
        #plan and execute
        #(success_status, trajectory_message, planning_time, error) = right_arm_moveit.plan()
        #right_arm_moveit.execute(trajectory_message, wait=True)
        right_arm_moveit.go()
        right_arm_moveit.stop()
        right_arm_moveit.clear_pose_targets()
        right_new_pose = right_arm_moveit.get_current_pose(end_effector_link='right_gripper').pose

        return {'response': "Done", 'new_pose': right_new_pose}


    #Define followme_callback service
    def followme_callback(msg):
        #get params
        x_waypoints = rospy.get_param("/x_waypoints")
        y_waypoints = rospy.get_param("/y_waypoints")
        z_waypoints = rospy.get_param("/z_waypoints")

        waypoints = []

        for i in range(len(x_waypoints)):
            pose = Pose()
            pose.position = Vector3(x_waypoints[i], y_waypoints[i], z_waypoints[i])
            pose.orientation = Quaternion(0,0,0,1)
            waypoints.append(pose)
        
        (plan, fraction) = right_arm_moveit.compute_cartesian_path(waypoints, 0.01, 0.0)           

        right_arm_moveit.execute(plan, wait=True)
        #right_arm_moveit.go()
        right_arm_moveit.stop()
        right_arm_moveit.clear_pose_targets()
        return {'response': "Done"}

    #Define start_callback service
    def start_callback(msg):
        #Start execution

        # Reboot Gripper
        right_gripper.reboot()
        # Calibrate Gripper
        right_gripper.calibrate()
        # Open Gripper
        right_gripper.open()

        # Reboot Gripper
        left_gripper.reboot()
        # Calibrate Gripper
        left_gripper.calibrate()
        # Open Gripper
        left_gripper.open()
        
        return EmptyResponse()

    #Define left_grip_callback service
    def left_grip_callback(msg):
        if(msg.state == 1):
            left_gripper.open()
            return {'response': "left Gripper Opened"}
        elif(msg.state == 0):
            left_gripper.close()
            return {'response': "left Gripper Closed"}


    #Define right_grip_callback service
    def right_grip_callback(msg):
        if(msg.state == 1):
            left_gripper.open()
            return {'response': "left Gripper Opened"}
        elif(msg.state == 0):
            left_gripper.close()
            return {'response': "left Gripper Closed"}

        
    #init home, reset, step and follow services
    start_srv = rospy.Service("start", Empty, start_callback)
    home_srv = rospy.Service("home", home, home_callback)
    left_go2pose_srv = rospy.Service("left_go2pose", left_go2pose, left_go2pose_callback)
    right_go2pose_srv = rospy.Service("right_go2pose", right_go2pose, right_go2pose_callback)
    followme_srv = rospy.Service("followme", followme, followme_callback)
    left_grip_srv = rospy.Service("left_grip", left_grip, left_grip_callback)
    right_grip_srv = rospy.Service("right_grip", right_grip, right_grip_callback)
    #iteration loop
    while not rospy.is_shutdown():

        #check
        #rospy.loginfo("check")
        
        #go to sleep!
        hz.sleep()

if __name__ == "__main__":
    try:
        main()
    except rospy.ROSInterruptException:
        pass 