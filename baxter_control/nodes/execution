#!/usr/bin/env python
"""

**Info**: This *execution* node 

**Services**:



**Parameters**:

    
**Note**: -

"""
import rospy
import sys
import moveit_commander
from geometry_msgs.msg import Quaternion, Vector3, PoseStamped, Pose
from moveit_msgs.msg import MoveItErrorCodes
from baxter_control.srv import home, left_go2pose, right_go2pose, followme, left_grip, right_grip, followmeRequest, followmeResponse, left_go2poseRequest, left_go2poseResponse, left_gripRequest, left_gripResponse
import baxter_interface
from baxter_interface import Gripper, CHECK_VERSION
from std_srvs.srv import Empty, EmptyResponse


freq = 10

def main():
    #initialize node
    rospy.init_node('execution')
    hz = rospy.Rate(freq)
    #wait until left_go2pose service is available
    rospy.wait_for_service('left_go2pose')
    left_go2pose_service = rospy.ServiceProxy('left_go2pose', left_go2pose)

    #wait until right_go2pose service is available
    rospy.wait_for_service('right_go2pose')
    right_go2pose_service = rospy.ServiceProxy('right_go2pose', right_go2pose)

    #wait until followme service is available
    rospy.wait_for_service('followme')
    followme_service = rospy.ServiceProxy('followme', followme)

    #wait until left_grip service is available
    rospy.wait_for_service('left_grip')
    left_grip_service = rospy.ServiceProxy('left_grip', left_grip)

    #wait until right_grip service is available
    rospy.wait_for_service('right_grip')
    right_grip_service = rospy.ServiceProxy('right_grip', right_grip)

    left_grip_ip = left_gripRequest()
    left_grip_ip.state = 1 #close gripper
    left_grip_service(left_grip_ip)

    #init
    left_go2pose_ip = left_go2poseRequest()
    left_go2pose_ip.goal_position = Vector3(0.83,0.49,-0.13)
    #left_go2pose_ip.goal_orientation = Quaternion(-0.022429013046662886,0.9997259081777473,0.0020754945605366004,0.006382806143092541)
    left_go2pose_service(left_go2pose_ip)

    rospy.sleep(1)
    left_grip_ip = left_gripRequest()
    left_grip_ip.state = 0 #close gripper
    left_grip_service(left_grip_ip)
    rospy.sleep(1)
    #intermediate
    
    left_go2pose_ip = left_go2poseRequest()
    left_go2pose_ip.goal_position = Vector3(0.76,0.49,0.1)
    #left_go2pose_ip.goal_orientation = Quaternion(-0.022429013046662886,0.9997259081777473,0.0020754945605366004,0.006382806143092541)
    left_go2pose_service(left_go2pose_ip)
    rospy.sleep(1)
    #go to goal
    left_go2pose_ip = left_go2poseRequest()
    left_go2pose_ip.goal_position = Vector3(0.73,-0.06,-0.13)
    #left_go2pose_ip.goal_orientation = Quaternion(-0.022429013046662886,0.9997259081777473,0.0020754945605366004,0.006382806143092541)
    left_go2pose_service(left_go2pose_ip)
    rospy.sleep(1)
    #release
    left_grip_ip = left_gripRequest()
    left_grip_ip.state = 1 #close gripper
    left_grip_service(left_grip_ip)

    rospy.sleep(1)
    left_go2pose_ip = left_go2poseRequest()
    left_go2pose_ip.goal_position = Vector3(0.76,0.49,0.1)
    #left_go2pose_ip.goal_orientation = Quaternion(-0.022429013046662886,0.9997259081777473,0.0020754945605366004,0.006382806143092541)
    left_go2pose_service(left_go2pose_ip)

    
    #define ros frequency
    hz = rospy.Rate(freq)
    #iteration loop
    while not rospy.is_shutdown():

        #check
        #rospy.loginfo("check")
        
        #go to sleep!
        hz.sleep()

if __name__ == "__main__":
    try:
        main()
    except rospy.ROSInterruptException:
        pass 